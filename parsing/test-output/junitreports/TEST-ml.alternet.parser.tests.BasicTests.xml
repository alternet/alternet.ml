<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by org.testng.reporters.JUnitReportReporter -->
<testsuite name="ml.alternet.parser.tests.BasicTests" tests="37" time="0.076" ignored="7" failures="2" timestamp="28 juil. 2017 08:53:06 GMT" skipped="0" hostname="zed.local" errors="0">
  <testcase name="rules_ShouldBe_prettyPrinted" time="0.001" classname="ml.alternet.parser.tests.BasicTests"/>
  <testcase name="optionalChoice_Should_matchInputString" time="0.000" classname="ml.alternet.parser.tests.BasicTests"/>
  <testcase name="escapedChar_Should_matchChar______" time="0.001" classname="ml.alternet.parser.tests.BasicTests"/>
  <testcase name="escapedChar_Should_matchChar____" time="0.004" classname="ml.alternet.parser.tests.BasicTests"/>
  <testcase name="escapedChar_Should_matchChar" time="0.001" classname="ml.alternet.parser.tests.BasicTests"/>
  <testcase name="escapedChar_Should_matchChar_______" time="0.002" classname="ml.alternet.parser.tests.BasicTests"/>
  <testcase name="notChar_ShouldNot_matchInput" time="0.000" classname="ml.alternet.parser.tests.BasicTests"/>
  <testcase name="rules_ShouldBe_prettyPrinted" time="0.001" classname="ml.alternet.parser.tests.BasicTests"/>
  <testcase name="rules_ShouldBe_prettyPrinted" time="0.001" classname="ml.alternet.parser.tests.BasicTests"/>
  <testcase name="rules_ShouldBe_prettyPrinted" time="0.001" classname="ml.alternet.parser.tests.BasicTests"/>
  <testcase name="rules_ShouldBe_prettyPrinted" time="0.001" classname="ml.alternet.parser.tests.BasicTests"/>
  <testcase name="rules_ShouldBe_prettyPrinted" time="0.001" classname="ml.alternet.parser.tests.BasicTests"/>
  <testcase name="escapedBackslasg_Should_matchBackslash" time="0.001" classname="ml.alternet.parser.tests.BasicTests"/>
  <testcase name="rules_ShouldBe_prettyPrinted" time="0.001" classname="ml.alternet.parser.tests.BasicTests"/>
  <testcase name="rules_ShouldBe_prettyPrinted" time="0.001" classname="ml.alternet.parser.tests.BasicTests"/>
  <testcase name="char_Should_matchInputString" time="0.023" classname="ml.alternet.parser.tests.BasicTests"/>
  <testcase name="choiceWithOptional_ShouldNot_matchInputString" time="0.001" classname="ml.alternet.parser.tests.BasicTests"/>
  <testcase name="rules_ShouldBe_prettyPrinted" time="0.001" classname="ml.alternet.parser.tests.BasicTests"/>
  <testcase name="rules_ShouldBe_prettyPrinted" time="0.000" classname="ml.alternet.parser.tests.BasicTests"/>
  <testcase name="notChar_Should_matchInputString" time="0.007" classname="ml.alternet.parser.tests.BasicTests"/>
  <testcase name="rules_ShouldBe_prettyPrinted" time="0.001" classname="ml.alternet.parser.tests.BasicTests"/>
  <testcase name="badGrammar_Should_FailOnInitialization" time="0.001" classname="ml.alternet.parser.tests.BasicTests"/>
  <testcase name="rules_ShouldBe_prettyPrinted" time="0.008" classname="ml.alternet.parser.tests.BasicTests"/>
  <testcase name="rules_ShouldBe_prettyPrinted" time="0.001" classname="ml.alternet.parser.tests.BasicTests"/>
  <testcase name="rules_ShouldBe_prettyPrinted" time="0.001" classname="ml.alternet.parser.tests.BasicTests"/>
  <testcase name="rules_ShouldBe_prettyPrinted" time="0.001" classname="ml.alternet.parser.tests.BasicTests"/>
  <testcase name="rules_ShouldBe_prettyPrinted" time="0.000" classname="ml.alternet.parser.tests.BasicTests"/>
  <testcase name="unicodeChar_ShouldBe_parsed" time="0.002" classname="ml.alternet.parser.tests.BasicTests"/>
  <testcase name="notChar_Should_matchInput" time="0.001" classname="ml.alternet.parser.tests.BasicTests"/>
  <testcase name="rules_ShouldBe_prettyPrinted" time="0.001" classname="ml.alternet.parser.tests.BasicTests"/>
  <testcase name="rules_ShouldBe_prettyPrinted" time="0.001" classname="ml.alternet.parser.tests.BasicTests"/>
  <testcase name="notChar_ShouldNot_matchLastInput" time="0.001" classname="ml.alternet.parser.tests.BasicTests"/>
  <testcase name="rules_ShouldBe_prettyPrinted" time="0.001" classname="ml.alternet.parser.tests.BasicTests">
    <failure type="java.lang.AssertionError" message="
Expecting:
 &lt;&quot;([&#039;\u0000&#039;-&#039;Z&#039;] | &#039;\&#039; | [&#039;^&#039;-&#039;\u10ffff&#039;])&quot;&gt;
to be equal to:
 &lt;&quot;!(L | R)&quot;&gt;
but was not.">
      <![CDATA[java.lang.AssertionError: 
Expecting:
 <"(['\u0000'-'Z'] | '\' | ['^'-'\u10ffff'])">
to be equal to:
 <"!(L | R)">
but was not.
	at ml.alternet.parser.tests.BasicTests.rules_ShouldBe_prettyPrinted(BasicTests.java:181)
	at sun.reflect.GeneratedMethodAccessor1.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:104)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:645)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:851)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1177)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:756)
	at org.testng.TestRunner.run(TestRunner.java:610)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:387)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:382)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340)
	at org.testng.SuiteRunner.run(SuiteRunner.java:289)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1293)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1218)
	at org.testng.TestNG.runSuites(TestNG.java:1133)
	at org.testng.TestNG.run(TestNG.java:1104)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:132)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:230)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:76)
]]>
    </failure>
  </testcase> <!-- rules_ShouldBe_prettyPrinted -->
  <testcase name="othersChar_Should_matchInputString" time="0.001" classname="ml.alternet.parser.tests.BasicTests"/>
  <testcase name="choiceWithOptional_Should_matchInputString" time="0.001" classname="ml.alternet.parser.tests.BasicTests"/>
  <testcase name="rules_ShouldBe_prettyPrinted" time="0.000" classname="ml.alternet.parser.tests.BasicTests"/>
  <testcase name="rules_ShouldBe_prettyPrinted" time="0.005" classname="ml.alternet.parser.tests.BasicTests">
    <failure type="java.lang.AssertionError" message="
Expecting:
 &lt;&quot;([&#039;\u0000&#039;-&#039;&#039;&#039;] | [&#039;*&#039;-&#039;^&#039;] | [&#039;`&#039;-&#039;\u10ffff&#039;])&quot;&gt;
to be equal to:
 &lt;&quot;!(CHAR | L | R)&quot;&gt;
but was not.">
      <![CDATA[java.lang.AssertionError: 
Expecting:
 <"(['\u0000'-'''] | ['*'-'^'] | ['`'-'\u10ffff'])">
to be equal to:
 <"!(CHAR | L | R)">
but was not.
	at ml.alternet.parser.tests.BasicTests.rules_ShouldBe_prettyPrinted(BasicTests.java:181)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:104)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:645)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:851)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1177)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:756)
	at org.testng.TestRunner.run(TestRunner.java:610)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:387)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:382)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340)
	at org.testng.SuiteRunner.run(SuiteRunner.java:289)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1293)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1218)
	at org.testng.TestNG.runSuites(TestNG.java:1133)
	at org.testng.TestNG.run(TestNG.java:1104)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:132)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:230)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:76)
]]>
    </failure>
  </testcase> <!-- rules_ShouldBe_prettyPrinted -->
  <testcase name="simpleGrammar_Should_consumeExpressionExcept2" classname="ml.alternet.parser.tests.GrammarTest">
    <skipped/>
  </testcase> <!-- simpleGrammar_Should_consumeExpressionExcept2 -->
  <testcase name="simpleGrammar_Should_consumeSimpleExcept1" classname="ml.alternet.parser.tests.GrammarTest">
    <skipped/>
  </testcase> <!-- simpleGrammar_Should_consumeSimpleExcept1 -->
  <testcase name="simpleGrammar_Should_consumeSimpleExcept2" classname="ml.alternet.parser.tests.GrammarTest">
    <skipped/>
  </testcase> <!-- simpleGrammar_Should_consumeSimpleExcept2 -->
  <testcase name="simpleGrammar_Should_consumeExpressionExcept1" classname="ml.alternet.parser.tests.GrammarTest">
    <skipped/>
  </testcase> <!-- simpleGrammar_Should_consumeExpressionExcept1 -->
  <testcase name="simpleGrammar_Should_consumeExpressionExcept3" classname="ml.alternet.parser.tests.GrammarTest">
    <skipped/>
  </testcase> <!-- simpleGrammar_Should_consumeExpressionExcept3 -->
  <testcase name="simpleGrammar_Should_consumeExpressionExcept4" classname="ml.alternet.parser.tests.GrammarTest">
    <skipped/>
  </testcase> <!-- simpleGrammar_Should_consumeExpressionExcept4 -->
  <testcase name="calcExpression_CanBe_evaluated" classname="ml.alternet.parser.step3.CalcTest">
    <skipped/>
  </testcase> <!-- calcExpression_CanBe_evaluated -->
</testsuite> <!-- ml.alternet.parser.tests.BasicTests -->
